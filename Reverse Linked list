#include <stdio.h>
#include <stdlib.h>

struct Node
{
    int data;
    struct Node *next;
} *first = NULL;
void Create(int A[], int n)
{
    int i;
    struct Node *last, *t;
    first = (struct Node *)malloc(sizeof(struct Node));
    first->data = A[0];
    first->next = NULL;
    last = first;

    for (i = 1; i < n; i++)
    {
        t = (struct Node *)malloc(sizeof(struct Node));
        t->data = A[i];
        t->next = NULL;
        last->next = t;
        last = t;
    }
}
// function to reverse the linked list using sliding pointers
void Reverse(struct Node *p)
{
    struct Node *q = NULL, *r = NULL;
    while (p != NULL)
    {
        r = q;
        q = p;
        p = p->next;
        q->next = r;
    }
    first = q;
}
// Recursive function for reversing linked list
void RReverse(struct Node *q, struct Node *p)
{
    if (p)
    {
        RReverse(p, p->next); // shifting p and q
        p->next = q;          // links change at returning time.
    }
    else
    {
        first = q;
    }
}
void display(struct Node *p)
{
    while (p)
    {
        printf("%d ", p->data);
        p = p->next;
    }
}
int main()
{
    int A[] = {1, 2, 3, 4, 5};
    int n = sizeof(A) / sizeof(int);
    Create(A, n);
    display(first);
    RReverse(NULL, first);
    printf("\n\n");
    display(first);
    return 0;
}
